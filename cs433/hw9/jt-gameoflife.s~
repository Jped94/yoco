.globl main
main:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%ebx
	pushl	%edi
	pushl	%esi
	movl	$globals, %esi
	call	yo_YOCO
	xorl	%eax, %eax	
	leal	-12(%ebp), %esp	
	popl	%esi
	popl	%edi
	popl	%ebx
	leave	
	ret	
//================================
yo_updateBoard:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%ebx
	pushl	%edi
	pushl	%esi
	subl	$frsize_updateBoard, %esp
      //-------------------------- 36: 	#i @ 0! 
	movl	$0, -124(%ebp)
while11:
      //-------------------------- 37: 	while #i < #BOARDSIZE:
	movl	4(%esi), %eax
	cmpl	%eax, -124(%ebp)
	jge	stmt10
      //-------------------------- 38: 		#nextGen[#i] @ #board[#i]!
	movl	-124(%ebp), %eax
	movl	-124(%ebp), %ecx
	movl	12(%esi, %eax, 4), %eax
	movl	%eax, -120(%ebp, %ecx, 4)
      //-------------------------- 39: 		#i @ #i + 1!
	movl	-124(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -124(%ebp)
	jmp	while11
stmt10:
      //-------------------------- 42: 	#i @ 0! 
	movl	$0, -124(%ebp)
while15:
      //-------------------------- 43: 	while #i < #BOARDSIZE:
	movl	4(%esi), %eax
	cmpl	%eax, -124(%ebp)
	jge	stmt14
      //-------------------------- 45: 		#neighborCount @ 0!
	movl	$0, -16(%ebp)
      //-------------------------- 46: 		#j @ -1! 
	movl	$-1, -128(%ebp)
while19:
      //-------------------------- 47: 		while #j<=1:
	cmpl	$1, -128(%ebp)
	jg	stmt18
      //-------------------------- 49: 			#rowAbove @ #i - #ROWSIZE + #j!
	movl	-124(%ebp), %eax
	subl	0(%esi), %eax
	addl	-128(%ebp), %eax
	movl	%eax, -132(%ebp)
      //-------------------------- 50: 			if 0 <= #rowAbove and #rowAbove < #BOARDSIZE and #board[#rowAbove] like yo: 
	cmpl	$0, -132(%ebp)
	jle	booltrue24
	movl	$0, %eax
	jmp	boolend25
booltrue24:
	movl	$1, %eax
boolend25:
	movl	4(%esi), %ecx
	cmpl	%ecx, -132(%ebp)
	jl	booltrue26
	movl	$0, %ecx
	jmp	boolend27
booltrue26:
	movl	$1, %ecx
boolend27:
	cmpl	$0, -132(%ebp)
	jg	and28
	movl	4(%esi), %edx
	cmpl	%edx, -132(%ebp)
	jl	booltrue22
and28:
	movl	$0, %eax
	jmp	boolend23
booltrue22:
	movl	$1, %eax
boolend23:
	movl	-132(%ebp), %ecx
	cmpl	$1, 12(%esi, %ecx, 4)
	je	booltrue29
	movl	$0, %ecx
	jmp	boolend30
booltrue29:
	movl	$1, %ecx
boolend30:
	cmpl	$0, -132(%ebp)
	jle	booltrue31
	movl	$0, %edx
	jmp	boolend32
booltrue31:
	movl	$1, %edx
boolend32:
	movl	4(%esi), %ebx
	cmpl	%ebx, -132(%ebp)
	jl	booltrue33
	movl	$0, %ebx
	jmp	boolend34
booltrue33:
	movl	$1, %ebx
boolend34:
	cmpl	$0, -132(%ebp)
	jg	stmt21
	movl	4(%esi), %edi
	cmpl	%edi, -132(%ebp)
	jge	stmt21
	movl	-132(%ebp), %edx
	cmpl	$1, 12(%esi, %edx, 4)
	jne	stmt21
      //-------------------------- 51: 				#neighborCount @ #neighborCount + 1!
	movl	-16(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -16(%ebp)
stmt21:
      //-------------------------- 54: 			#thisRow @ #i + #j!
	movl	-124(%ebp), %eax
	addl	-128(%ebp), %eax
	movl	%eax, -136(%ebp)
      //-------------------------- 55: 			if #j not like 0 and 0 < #thisRow and #thisRow < #BOARDSIZE and #board[#thisRow] like yo: 
	cmpl	$0, -128(%ebp)
	jne	booltrue41
	movl	$0, %eax
	jmp	boolend42
booltrue41:
	movl	$1, %eax
boolend42:
	cmpl	$0, -136(%ebp)
	jl	booltrue43
	movl	$0, %ecx
	jmp	boolend44
booltrue43:
	movl	$1, %ecx
boolend44:
	cmpl	$0, -128(%ebp)
	je	and45
	cmpl	$0, -136(%ebp)
	jl	booltrue39
and45:
	movl	$0, %eax
	jmp	boolend40
booltrue39:
	movl	$1, %eax
boolend40:
	movl	4(%esi), %ecx
	cmpl	%ecx, -136(%ebp)
	jl	booltrue46
	movl	$0, %ecx
	jmp	boolend47
booltrue46:
	movl	$1, %ecx
boolend47:
	cmpl	$0, -128(%ebp)
	jne	booltrue49
	movl	$0, %edx
	jmp	boolend50
booltrue49:
	movl	$1, %edx
boolend50:
	cmpl	$0, -136(%ebp)
	jl	booltrue51
	movl	$0, %ebx
	jmp	boolend52
booltrue51:
	movl	$1, %ebx
boolend52:
	cmpl	$0, -128(%ebp)
	je	and48
	cmpl	$0, -136(%ebp)
	jge	and48
	movl	4(%esi), %edx
	cmpl	%edx, -136(%ebp)
	jl	booltrue37
and48:
	movl	$0, %eax
	jmp	boolend38
booltrue37:
	movl	$1, %eax
boolend38:
	movl	-136(%ebp), %ecx
	cmpl	$1, 12(%esi, %ecx, 4)
	je	booltrue53
	movl	$0, %ecx
	jmp	boolend54
booltrue53:
	movl	$1, %ecx
boolend54:
	cmpl	$0, -128(%ebp)
	jne	booltrue57
	movl	$0, %edx
	jmp	boolend58
booltrue57:
	movl	$1, %edx
boolend58:
	cmpl	$0, -136(%ebp)
	jl	booltrue59
	movl	$0, %ebx
	jmp	boolend60
booltrue59:
	movl	$1, %ebx
boolend60:
	cmpl	$0, -128(%ebp)
	je	and61
	cmpl	$0, -136(%ebp)
	jl	booltrue55
and61:
	movl	$0, %edx
	jmp	boolend56
booltrue55:
	movl	$1, %edx
boolend56:
	movl	4(%esi), %ebx
	cmpl	%ebx, -136(%ebp)
	jl	booltrue62
	movl	$0, %ebx
	jmp	boolend63
booltrue62:
	movl	$1, %ebx
boolend63:
	cmpl	$0, -128(%ebp)
	jne	booltrue64
	movl	$0, %edi
	jmp	boolend65
booltrue64:
	movl	$1, %edi
boolend65:
	cmpl	$0, -136(%ebp)
	jl	booltrue66
//creating new memtemp at disp -144
	movl	%eax, -144(%ebp)
	movl	$0, %eax
	jmp	boolend67
booltrue66:
	movl	$1, %eax
boolend67:
	cmpl	$0, -128(%ebp)
	je	stmt36
	cmpl	$0, -136(%ebp)
	jge	stmt36
	movl	4(%esi), %eax
	cmpl	%eax, -136(%ebp)
	jge	stmt36
	movl	-136(%ebp), %eax
	cmpl	$1, 12(%esi, %eax, 4)
	jne	stmt36
//freeing memory temp at disp -144
      //-------------------------- 56: 				#neighborCount @ #neighborCount + 1!
	movl	-16(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -16(%ebp)
stmt36:
      //-------------------------- 59: 			#rowBelow @ #i + #ROWSIZE + #j!
	movl	-124(%ebp), %eax
	addl	0(%esi), %eax
	addl	-128(%ebp), %eax
	movl	%eax, -140(%ebp)
      //-------------------------- 60: 			if 0 < #rowBelow and #rowBelow < #BOARDSIZE and #board[#rowBelow] like yo: 
	cmpl	$0, -140(%ebp)
	jl	booltrue72
	movl	$0, %eax
	jmp	boolend73
booltrue72:
	movl	$1, %eax
boolend73:
	movl	4(%esi), %ecx
	cmpl	%ecx, -140(%ebp)
	jl	booltrue74
	movl	$0, %ecx
	jmp	boolend75
booltrue74:
	movl	$1, %ecx
boolend75:
	cmpl	$0, -140(%ebp)
	jge	and76
	movl	4(%esi), %edx
	cmpl	%edx, -140(%ebp)
	jl	booltrue70
and76:
	movl	$0, %eax
	jmp	boolend71
booltrue70:
	movl	$1, %eax
boolend71:
	movl	-140(%ebp), %ecx
	cmpl	$1, 12(%esi, %ecx, 4)
	je	booltrue77
	movl	$0, %ecx
	jmp	boolend78
booltrue77:
	movl	$1, %ecx
boolend78:
	cmpl	$0, -140(%ebp)
	jl	booltrue79
	movl	$0, %edx
	jmp	boolend80
booltrue79:
	movl	$1, %edx
boolend80:
	movl	4(%esi), %ebx
	cmpl	%ebx, -140(%ebp)
	jl	booltrue81
	movl	$0, %ebx
	jmp	boolend82
booltrue81:
	movl	$1, %ebx
boolend82:
	cmpl	$0, -140(%ebp)
	jge	stmt69
	movl	4(%esi), %edi
	cmpl	%edi, -140(%ebp)
	jge	stmt69
	movl	-140(%ebp), %edx
	cmpl	$1, 12(%esi, %edx, 4)
	jne	stmt69
      //-------------------------- 61: 				#neighborCount @ #neighborCount + 1!
	movl	-16(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -16(%ebp)
stmt69:
      //-------------------------- 64: 			#j @ #j + 1!
	movl	-128(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -128(%ebp)
	jmp	while19
stmt18:
      //-------------------------- 67: 		if #board[#i] like yo:
	movl	-124(%ebp), %eax
	cmpl	$1, 12(%esi, %eax, 4)
	jne	else84
      //-------------------------- 69: 			if #neighborCount < 2:
	cmpl	$2, -16(%ebp)
	jge	else85
      //-------------------------- 70: 				#nextGen[#i] @ no!
	movl	-124(%ebp), %eax
	movl	$0, -120(%ebp, %eax, 4)
	jmp	stmt83
else85:
      //-------------------------- 71: 			else if #neighborCount > 3:
	cmpl	$3, -16(%ebp)
	jle	stmt83
      //-------------------------- 73: 				#nextGen[#i] @ no!
	movl	-124(%ebp), %eax
	movl	$0, -120(%ebp, %eax, 4)
	jmp	stmt83
else84:
      //-------------------------- 75: 		else if(#neighborCount like 3):
	cmpl	$3, -16(%ebp)
	jne	stmt83
      //-------------------------- 78: 			#nextGen[#i] @ yo!
	movl	-124(%ebp), %eax
	movl	$1, -120(%ebp, %eax, 4)
stmt83:
      //-------------------------- 80: 		#i @ #i + 1!
	movl	-124(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -124(%ebp)
	jmp	while15
stmt14:
      //-------------------------- 83: 	#i @ 0! 
	movl	$0, -124(%ebp)
while87:
      //-------------------------- 84: 	while #i < #BOARDSIZE:
	movl	4(%esi), %eax
	cmpl	%eax, -124(%ebp)
	jge	funend1
      //-------------------------- 85: 		#board[#i] @ #nextGen[#i]!
	movl	-124(%ebp), %eax
	movl	-124(%ebp), %ecx
	movl	-120(%ebp, %eax, 4), %eax
	movl	%eax, 12(%esi, %ecx, 4)
      //-------------------------- 86: 		#i @ #i + 1!
	movl	-124(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -124(%ebp)
	jmp	while87
	leal	-12(%ebp), %esp	
	popl	%esi
	popl	%edi
	popl	%ebx
	leave	
	ret	
	.set	frsize_updateBoard, 132
funend1:
//================================
yo_printGeneration:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%ebx
	pushl	%edi
	pushl	%esi
	subl	$frsize_printGeneration, %esp
      //-------------------------- 92: 	int #i @ 0! 
	movl	$0, -16(%ebp)
while91:
      //-------------------------- 93: 	while #i < #BOARDSIZE:
	movl	4(%esi), %eax
	cmpl	%eax, -16(%ebp)
	jge	funend89
      //-------------------------- 94: 		if #i % #ROWSIZE like 0: 
	movl	-16(%ebp), %eax
	cltd	
	idivl	0(%esi)
	cmpl	$0, %edx
	jne	stmt92
      //-------------------------- 95: 			putc('\n')!
	pushl	$10
	call	yo_putc
	addl	$4, %esp
stmt92:
      //-------------------------- 97: 		if #board[#i] like yo:
	movl	-16(%ebp), %eax
	cmpl	$1, 12(%esi, %eax, 4)
	jne	else94
      //-------------------------- 98: 			putc('X')!
	pushl	$88
	call	yo_putc
	addl	$4, %esp
	jmp	stmt93
else94:
      //-------------------------- 100: 			putc('_')!
	pushl	$95
	call	yo_putc
	addl	$4, %esp
stmt93:
      //-------------------------- 102: 		#i @ #i + 1!
	movl	-16(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -16(%ebp)
	jmp	while91
	leal	-12(%ebp), %esp	
	popl	%esi
	popl	%edi
	popl	%ebx
	leave	
	ret	
	.set	frsize_printGeneration, 4
funend89:
//================================
yo_initBoard:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%ebx
	pushl	%edi
	pushl	%esi
	subl	$frsize_initBoard, %esp
      //-------------------------- 110: 	int #i @ 0!
	movl	$0, -16(%ebp)
while98:
      //-------------------------- 111: 	while #i < #BOARDSIZE:
	movl	4(%esi), %eax
	cmpl	%eax, -16(%ebp)
	jge	stmt97
      //-------------------------- 112: 		#board[#i] @ no!
	movl	-16(%ebp), %eax
	movl	$0, 12(%esi, %eax, 4)
      //-------------------------- 113: 	 	#i @ #i + 1!
	movl	-16(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -16(%ebp)
	jmp	while98
stmt97:
      //-------------------------- 118: 	int #base @ 1!
	movl	$1, -20(%ebp)
      //-------------------------- 119: 	#board[#base] @ yo!
	movl	-20(%ebp), %eax
	movl	$1, 12(%esi, %eax, 4)
      //-------------------------- 120: 	#board[#base+#ROWSIZE + 1] @ yo!
	movl	-20(%ebp), %eax
	addl	0(%esi), %eax
	addl	$1, %eax
	movl	$1, 12(%esi, %eax, 4)
      //-------------------------- 121: 	#board[#base+2*#ROWSIZE -1] @ yo!
	movl	$2, %eax
	imull	0(%esi), %eax
	movl	-20(%ebp), %ecx
	addl	%eax, %ecx
	subl	$1, %ecx
	movl	$1, 12(%esi, %ecx, 4)
      //-------------------------- 122: 	#board[#base+2*#ROWSIZE] @ yo!
	movl	$2, %eax
	imull	0(%esi), %eax
	movl	-20(%ebp), %ecx
	addl	%eax, %ecx
	movl	$1, 12(%esi, %ecx, 4)
      //-------------------------- 123: 	#board[#base+2*#ROWSIZE + 1] @ yo!
	movl	$2, %eax
	imull	0(%esi), %eax
	movl	-20(%ebp), %ecx
	addl	%eax, %ecx
	addl	$1, %ecx
	movl	$1, 12(%esi, %ecx, 4)
	leal	-12(%ebp), %esp	
	popl	%esi
	popl	%edi
	popl	%ebx
	leave	
	ret	
	.set	frsize_initBoard, 8
//================================
yo_YOCO:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%ebx
	pushl	%edi
	pushl	%esi
	subl	$frsize_YOCO, %esp
      //-------------------------- 127: 	#ROWSIZE @ 5!
	movl	$5, 0(%esi)
      //-------------------------- 128: 	#BOARDSIZE @ #ROWSIZE * #ROWSIZE!
	movl	0(%esi), %eax
	imull	0(%esi), %eax
	movl	%eax, 4(%esi)
      //-------------------------- 129: 	#NUMGEN @ 8!
	movl	$8, 8(%esi)
      //-------------------------- 130: 	initBoard()!
	call	yo_initBoard
	addl	$0, %esp
      //-------------------------- 132: 	printGeneration()!
	call	yo_printGeneration
	addl	$0, %esp
      //-------------------------- 134: 	int #i @ 0! 
	movl	$0, -16(%ebp)
while112:
      //-------------------------- 135: 	while #i < #NUMGEN:
	movl	8(%esi), %eax
	cmpl	%eax, -16(%ebp)
	jge	funend105
      //-------------------------- 136: 		putc('\n')!
	pushl	$10
	call	yo_putc
	addl	$4, %esp
      //-------------------------- 137: 		updateBoard()!
	call	yo_updateBoard
	addl	$0, %esp
      //-------------------------- 138: 		printGeneration()!
	call	yo_printGeneration
	addl	$0, %esp
      //-------------------------- 139: 		#i @ #i + 1!
	movl	-16(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -16(%ebp)
	jmp	while112
	leal	-12(%ebp), %esp	
	popl	%esi
	popl	%edi
	popl	%ebx
	leave	
	ret	
	.set	frsize_YOCO, 4
funend105:
//================================
yo_put:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	8(%ebp)	
	pushl	$intStr
	call	printf	
	leave	
	ret	
//================================
yo_get:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$4, %esp	
	leal	-4(%ebp), %eax	
	pushl	%eax	
	pushl	$intStr
	call	scanf	
	movl	-4(%ebp), %eax	
	leave	
	ret	
//================================
yo_putc:
	jmp	putchar	
//================================
yo_getc:
	jmp	getchar	

.section	.rodata
intStr: .string "%d"

.section	.data
globals: .space 116
